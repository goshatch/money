#!/usr/bin/env bb

;; Project goals:
;; 1. Store bank/credit card transactions in a flexible format
;;    instead of relying on crappy fintech apps and websites.
;; 2. Create custom reports based on this data
;; 3. ???
;; 4. WEALTH AND PROFIT
;;
;; TODO: Roadmap
;; - Export data as csv from the sqlite database with custom ranges
;; - Automatically pull from Monzo/Amex/etc
;; - "How long will it take us to save x given current trends?"
;; - "Can I afford to buy something costing x?"
;; - "How much budget do I have left for x?"

(require
 '[clojure.java.io :as io]
 '[clojure.data.csv :as csv]
 '[clojure.string :as str]
 '[clojure.edn :as edn]
 '[babashka.pods :as pods]
 '[clojure.pprint :refer [pprint]])

(import '[java.security MessageDigest])

(pods/load-pod 'org.babashka/go-sqlite3 "0.2.4")
(require '[pod.babashka.go-sqlite3 :as sqlite])

(def config-path (str (System/getenv "HOME") "/.config/money/config.edn"))

(def config
  (if (.exists (io/file config-path))
    (edn/read-string (slurp config-path))
    (do
      (println "Could not find config file at " config-path ", exiting.")
      (System/exit 1))))

(def db-path (str (System/getenv "HOME") "/.local/share/money/transactions.db"))
(def db-file (io/file db-path))

;; Backup database if it exists before doing any operations on it
(when (.exists db-file)
  (let [backup-path (str db-path "." (System/currentTimeMillis) ".bak")]
    (io/copy db-file (io/file backup-path))
    (println "Database backed up to " backup-path)))

(defn initialize-db []
  (sqlite/execute!
   db-path
   ["CREATE TABLE IF NOT EXISTS transactions (
        id TEXT PRIMARY KEY,
        date TEXT,
        amount REAL,
        name TEXT,
        original_category TEXT,
        category TEXT,
        account TEXT,
        data TEXT
        );"]))

(defn identify-csv-type [headers]
  (some (fn [csv-type]
          (let [id-cols (set (:identifier-columns csv-type))]
            (when (every? (set headers) id-cols)
              csv-type)))
        (:csv-types config)))

(defn normalize-date [date-str]
  (try
    (let [formatter (java.time.format.DateTimeFormatter/ofPattern "dd/MM/yyyy")
          parsed-date (java.time.LocalDate/parse date-str formatter)]
      (.format parsed-date
               (java.time.format.DateTimeFormatter/ofPattern "yyyy-MM-dd")))
    (catch Exception e
      (println "Warning: failed to parse date " date-str ": " (.getMessage e))
      nil)))

(defn apply-category-rules [transaction]
  (let [name (:name transaction)
        original-category (:original-category transaction)]
    (or
     (some (fn [rule]
             (let [{:keys [category match]} rule
                   name-cond (if-let [sub (:name match)]
                               (str/includes? (str/lower-case name) (str/lower-case sub))
                               true)
                   orig-cat-cond (if-let [orig-cat (:original-category match)]
                                   (= orig-cat original-category)
                                   true)]
               (when (and name-cond orig-cat-cond)
                 category)))
           (:category-rules config))
     nil)))

(defn process-csv-file [file]
  (with-open [reader (io/reader file)]
    (let [data (doall (csv/read-csv reader))
          headers (first data)
          rows (rest data)
          csv-type (identify-csv-type headers)]
      (if csv-type
        (let [column-mappings (:column-mappings csv-type)
              account (:name csv-type)]
          (doall
           (mapcat (fn [[idx row]]
                     (let [trimmed-row (map str/trim row)
                           row-map (zipmap headers trimmed-row)
                           transaction (reduce-kv
                                        (fn [m csv-col internal-col]
                                          (if internal-col
                                            (assoc m internal-col (get row-map csv-col))
                                            m))
                                        {:account account}
                                        column-mappings)
                           amount-str (:amount transaction)]
                       (try
                         (when (or (nil? amount-str) (str/blank? amount-str))
                           (throw (Exception. "Amount is missing or blank")))
                         (let [amount (Double/parseDouble amount-str)
                               amount (if (= "amex" (:account transaction)) (- amount) amount)
                               date-str (:date transaction)
                               normalized-date (normalize-date date-str)
                               discarded-data (apply dissoc row-map (keys column-mappings))
                               final-transaction (assoc transaction
                                                        :date normalized-date
                                                        :amount amount
                                                        :category (apply-category-rules transaction)
                                                        :discarded-data (pr-str discarded-data))]
                           [final-transaction])
                         (catch Exception e
                           (println "Warning: Failed to process transaction in file" file "on row" (+ 1 idx))
                           (println "Details:" (.getMessage e))
                           (println "Transaction data:")
                           (pprint transaction)
                           ;; Skip this transaction
                           ;; []
                           (System/exit 1)))))
                   (map-indexed vector rows))))
        (do
          (println "Error: could not indentify CSV type for file" file)
          [])))))

(defn generate-transaction-id [transaction]
  (let [map-str (str (select-keys transaction [:date :amount :name :category :account :discarded-data]))
        md (MessageDigest/getInstance "MD5")
        bytes (.digest md (.getBytes map-str "UTF-8"))]
    (format "%032x" (BigInteger. 1 bytes))))

(defn insert-transactions [transactions]
  (doseq [transaction transactions]
    (let [id (generate-transaction-id transaction)
          transaction (assoc transaction :id id)]
      (try
        (sqlite/execute!
         db-path
         ["INSERT INTO transactions (id, date, amount, name, original_category, category, account, data)
           VALUES (?, ?, ?, ?, ?, ?, ?, ?);"
          (:id transaction)
          (:date transaction)
          (:amount transaction)
          (:name transaction)
          (:original-category transaction)
          (:category transaction)
          (:account transaction)
          (:discarded-data transaction)])
        (catch Exception e
          (println "Error inserting transaction" (:id transaction) ": " (.getMessage e)))))))

(defn categorize-existing-transactions []
  (let [transactions (sqlite/query
                      db-path
                      ["SELECT * FROM transactions WHERE category is NULL OR category = '';"])]
    (doseq [transaction transactions]
      (let [original-category (:original_category transaction)
            updated-category (apply-category-rules (assoc transaction :original-category original-category))
            updated-transaction (assoc transaction :category updated-category)]
        (try
          (sqlite/execute!
           db-path
           ["UPDATE transactions SET category = ? WHERE id = ?;"
            (:category updated-transaction)
            (:id updated-transaction)])
          (println "Categorized transaction " (:id updated-transaction) "to" (:category updated-transaction))
          (catch Exception e
            (println "Error updating transaction" (:id updated-transaction) ":" (.getMessage e))))))))

(defn -main [& args]
  (if (empty? args)
    (println "Usage: money [--categorize] <input-file1> <input-file2> ...")
    (let [mode (first args)
          files (if (= mode "--categorize") (rest args) args)]
      (initialize-db)
      (cond
        (= mode "--categorize")
        (do
          (categorize-existing-transactions)
          (println "\nCategorization completed!"))

        :else
        (do
          (let [transactions (mapcat process-csv-file files)]
            (insert-transactions transactions)
            (println "Processed" (count transactions) "transactions.")))))))

(apply -main *command-line-args*)
